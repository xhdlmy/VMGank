# MVVM 各层的职责

    View: Activity|Fragment 还有 xml，负责 View 的绘制与用户交互。
    Model: 实体模型，负责数据的获取（网络、内存、本地）和保存。
    ViewModel: 只需要关注数据和业务逻辑，不需要和UI或者控件打交道。（不持有UI控件的引用）

## View

    在 Activity|Fragment 不写业务逻辑和业务数据相关的代码，更新UI通过数据绑定实现(DataBinding)，
    View层初始化一些控件，
    View层可以提供更新UI的接口（MVP 的 V层就是如此，提供更新UI的接口；但是我们更倾向所有的UI元素都是通过数据来驱动更改UI），
    View层可以处理事件（但是我们更希望UI事件通过Command来绑定）。
    简单地说：View层不做任何业务逻辑、不涉及操作数据、不处理数据，UI和数据严格的分开。

## ViewModel

    ViewModel层做的事情刚好和View层相反，ViewModel只做和业务逻辑和业务数据相关的事，不做任何和UI相关的事情，
    ViewModel 层不会持有任何控件的引用，更不会在ViewModel中通过UI控件的引用去做更新UI的事情。

    只做对数据进行操作的逻辑：
        DataBinding框架已经支持双向绑定，让我们可以通过双向绑定获取View层反馈给ViewModel层的数据，并对这些数据上进行操作。
        关于对UI控件事件的处理，我们也希望能把这些事件处理绑定到控件上，并把这些事件的处理统一化，
        为此我们通过BindingAdapter对一些常用的事件做了封装，把一个个事件封装成一个个Command，
        对于每个事件我们用一个ReplyCommand去处理就行了，ReplyCommand会把你可能需要的数据带给你，
        这使得我们在ViewModel层处理事件的时候只需要关心处理数据就行了。

        注意，不要太多的成员变量：
            1、context
            2、model
            3、field
            4、command
            5、child viewModel

## Model

    Model层最大的特点是被赋予了数据获取的职责，与我们平常Model层只定义实体对象的行为截然不同。
    实例中，数据的获取、存储、数据状态变化都是Model层的任务。Model包括实体模型（Bean）、
    Retrofit的Service ，获取网络数据接口，
    本地存储（增删改查）接口，
    数据变化监听等。

    Model提供数据获取接口供ViewModel调用，经数据转换和操作并最终映射绑定到View层某个UI元素的属性上。



# 优势

1、数据驱动，ViewModel 只处理数据
2、ViewModel 与 View 解耦，ViewModel 对不同的 View 来说可复用
3、
